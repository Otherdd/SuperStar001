name: 多账号学习

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 8 * * *"

jobs:
  MultiAccountStudy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        account: [1, 2, 3]
        include:
          - account: 1
            initial_delay: 0
          - account: 2
            initial_delay: 300
          - account: 3
            initial_delay: 600
      max-parallel: 3

    steps:
      - name: 拷贝代码
        uses: actions/checkout@v4

      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 安装依赖包
        run: pip install -r ./requirements.txt

      - name: 为账号 ${{ matrix.account }} 创建差异化配置
        run: |
          # 生成随机行为参数
          pause_min=$(( (RANDOM % 5) + 3 ))
          pause_max=$(( (RANDOM % 10) + 10 ))
          replay_chance=$(( (RANDOM % 11) + 5 ))
          request_delay=$(( (RANDOM % 5) + 2 ))
          random_delay_range=$(( (RANDOM % 3) + 1 ))

          # 随机 UA
          case $(( RANDOM % 3 )) in
            0) user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" ;;
            1) user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36" ;;
            2) user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0" ;;
          esac

          # 修正：EOF 必须顶格写，不能有缩进
          cat > "config_${{ matrix.account }}.ini" << EOF
[common]
username = ${{ secrets[format('USERNAME{0}', matrix.account)] }}
password = ${{ secrets[format('PASSWORD{0}', matrix.account)] }}
course_list = 255731372
speed = 1.0
notopen_action = continue

[behavior]
random_pause = true
pause_min_interval = $(( pause_min * 60 ))
pause_max_interval = $(( pause_max * 60 ))
replay_chance = $replay_chance

[network]
user_agent = $user_agent
accept_language = zh-CN,zh;q=0.9,en;q=0.8
accept_encoding = gzip, deflate, br
connection = keep-alive
sec_ch_ua = "Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"
sec_ch_ua_mobile = ?0
sec_ch_ua_platform = "Windows"
sec_fetch_site = same-origin
sec_fetch_mode = navigate
sec_fetch_user = ?1
sec_fetch_dest = document
request_delay = $request_delay
random_delay_range = $random_delay_range
max_concurrent = 1
max_retries = 3
retry_delay = 10
timeout = 30

[tiku]
disable = true

[security]
random_click = true
simulate_scroll = true
human_behavior = true
EOF
          echo "账号 ${{ matrix.account }} 配置文件创建完成"
          echo "用户代理: $user_agent"
          echo "网络延迟设置: ${request_delay}s ± ${random_delay_range}s"
          cat "config_${{ matrix.account }}.ini"

      - name: 初始延迟 - 账号 ${{ matrix.account }}
        if: matrix.initial_delay > 0
        run: |
          echo "账号 ${{ matrix.account }} 初始延迟 ${{ matrix.initial_delay }} 秒..."
          sleep ${{ matrix.initial_delay }}

      - name: 运行学习脚本 - 账号 ${{ matrix.account }} (带重试机制)
        run: |
          echo "开始执行账号 ${{ matrix.account }} 的学习任务..."
          LOG_FILE="study_log_account_${{ matrix.account }}_$(date +%Y%m%d_%H%M%S).txt"
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ $SUCCESS -eq 0 ]; do
            echo "尝试执行 (第 $((RETRY_COUNT+1)) 次)"
            python main.py -c "config_${{ matrix.account }}.ini" 2>&1 | tee "$LOG_FILE"
            EXIT_CODE=${PIPESTATUS[0]}

            if [ $EXIT_CODE -eq 0 ]; then
              echo "✅ 账号 ${{ matrix.account }} 学习任务完成"
              SUCCESS=1
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              echo "❌ 账号 ${{ matrix.account }} 学习任务失败，退出码: $EXIT_CODE"

              if grep -q "403" "$LOG_FILE"; then
                echo "⚠️ 检测到403错误，可能是权限问题"
              fi
              if grep -q "493" "$LOG_FILE"; then
                echo "⚠️ 检测到493错误，可能是请求头问题"
              fi

              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "等待 5 分钟后重试..."
                sleep 300

                # 重试时重新生成配置
                pause_min=$(( (RANDOM % 5) + 3 ))
                pause_max=$(( (RANDOM % 10) + 10 ))
                request_delay=$(( (RANDOM % 5) + 3 ))

                case $(( RANDOM % 3 )) in
                  0) user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" ;;
                  1) user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15" ;;
                  2) user_agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" ;;
                esac

                # 修正：第二个 EOF 也必须顶格写
                cat > "config_${{ matrix.account }}.ini" << EOF
[common]
username = ${{ secrets[format('USERNAME{0}', matrix.account)] }}
password = ${{ secrets[format('PASSWORD{0}', matrix.account)] }}
course_list = 255731372
speed = 1.0
notopen_action = continue

[behavior]
random_pause = true
pause_min_interval = $(( pause_min * 60 ))
pause_max_interval = $(( pause_max * 60 ))
replay_chance = $(( (RANDOM % 11) + 5 ))

[network]
user_agent = $user_agent
accept_language = zh-CN,zh;q=0.9,en;q=0.8
accept_encoding = gzip, deflate, br
request_delay = $request_delay
random_delay_range = $(( (RANDOM % 3) + 2 ))
max_concurrent = 1
max_retries = 3
retry_delay = 15
timeout = 30

[tiku]
disable = true

[security]
random_click = true
simulate_scroll = true
human_behavior = true
EOF
              else
                echo "❌ 达到最大重试次数，任务失败"
                echo "LOG_FILE=$LOG_FILE" >> $GITHUB_ENV
              fi
            fi
          done

          if [ $SUCCESS -eq 0 ]; then
            exit 1
          fi

      - name: 上传日志（无论成功或失败）
        uses: actions/upload-artifact@v4
        with:
          name: logs-account-${{ matrix.account }}
          path: "study_log_account_${{ matrix.account }}_*.txt"
          retention-days: 7

  Summary:
    runs-on: ubuntu-latest
    needs: MultiAccountStudy
    if: always()
    steps:
      - name: 任务执行总结
        run: |
          echo "多账号并行学习任务执行完成"
          echo "执行时间: $(date)"
          echo "执行策略:"
          echo "- 三个账号并行执行"
          echo "- 差异化初始延迟 (0/5/10分钟)"
          echo "- 差异化用户代理和网络参数"
          echo "- 多层重试机制"
          echo "- 403/493错误检测和处理"
